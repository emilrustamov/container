PLG_CONVERTFORMSAPPS_PHP="Convert Forms - Apps - PHP"
PLG_CONVERTFORMSAPPS_PHP_DESC="Exécuter PHP et partager les données entre les tâches"
PLG_CONVERTFORMSAPPS_PHP_ALIAS="PHP"
PLG_CONVERTFORMSAPPS_PHP_ACTION_PHP="Exécuter PHP"
PLG_CONVERTFORMSAPPS_PHP_ACTION_PHP_DESC="Exécutez votre propre code PHP."
PLG_CONVERTFORMSAPPS_PHP_PHP="PHP"
PLG_CONVERTFORMSAPPS_PHP_PHP_DESC="Saisissez le code PHP à exécuter. Vous pouvez interroger la base de données, envoyer des données à une URL ou même récupérer des données à partir d'une API. Tout est possible. <h4>VARIABLES SPÉCIALES</h4>
Below are a few special variables you can use in your code.<br><br>- <em>$form</em> (Array) The form's settings<br>- <em>$submission</em> (Object) The final submission with the user's submitted values<br>- <em>$responses</em> (Array) The responses of the previously executed steps<h4>PASS DATA TO NEXT STEP</h4>Use <em>return $var;</em> statement to make <em>$var</em> available in the next step using the <em>{task.prev.response}</em> Smart Tag. You may return an Array or Object and access any property using the <em>{task.prev.response.PROPERTY}</em> syntax. Use the dot notation syntax to access unlimited depthed properties. <br><br>For example: If you return an array like this: <em>return [ 'name' => 'John', 'age'  => 23]</em>, ous pouvez accéder à la propriété <em>age</em> dans l'étape suivante en utilisant la syntaxe <em>{task.prev.response.age}</em>. Si vous ne renvoyez qu'un nombre ou une chaîne, utilisez plutôt <em>{task.prev.response}</em>.<br><br>Il n'est pas nécessaire d'inclure les balises PHP d'ouverture et de fermeture (&lt;?php ?>) ."
