PLG_CONVERTFORMSAPPS_PHP="Convert Forms - Applicatie - PHP"
PLG_CONVERTFORMSAPPS_PHP_DESC="Voer PHP script uit en deel data tussen taken"
PLG_CONVERTFORMSAPPS_PHP_ALIAS="PHP"
PLG_CONVERTFORMSAPPS_PHP_ACTION_PHP="Voer PHP script uit"
PLG_CONVERTFORMSAPPS_PHP_ACTION_PHP_DESC="Voer uw eigen PHP script uit."
PLG_CONVERTFORMSAPPS_PHP_PHP="PHP"
PLG_CONVERTFORMSAPPS_PHP_PHP_DESC="Vul de PHP code in om uit te voeren.U kunt een query doen op de database. U kunt data posten in een URL en zelfs data opvragen via een API. Er zijn geen beperkingen. <h4> SPECIALE VARIABELEN</h4>
Below are a few special variables you can use in your code.<br><br>- <em>$form</em> (Array) The form's settings<br>- <em>$submission</em> (Object) The final submission with the user's submitted values<br>- <em>$responses</em> (Array) The responses of the previously executed steps<h4>PASS DATA TO NEXT STEP</h4>Use <em>return $var;</em> statement to make <em>$var</em> available in the next step using the <em>{task.prev.response}</em> Smart Tag. You may return an Array or Object and access any property using the <em>{task.prev.response.PROPERTY}</em> syntax. Use the dot notation syntax to access unlimited depthed properties. <br><br>For example: If you return an array like this: <em>return [ 'name' => 'John', 'leeftijd' => 23]</em>, u kunt het <em> leeftijd </em>kenmerk gebruiken  in de syntax van de volgende stap <em>{task.prev.response.age} </em>. Als u alleen een getal of string ingeeft, gebruik dan in plaats daarvan <em> {task.prev.response} </em> U hoeft geen PHP opening en closing tags (&lt;?php ?>) te gebruiken"
