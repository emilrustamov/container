PLG_CONVERTFORMSAPPS_PHP="Convertir Formularios - Apps - PHP"
PLG_CONVERTFORMSAPPS_PHP_DESC="Ejecute PHP y comparta datos entre tareas"
PLG_CONVERTFORMSAPPS_PHP_ALIAS="PHP"
PLG_CONVERTFORMSAPPS_PHP_ACTION_PHP="Ejecutar PHP"
PLG_CONVERTFORMSAPPS_PHP_ACTION_PHP_DESC="Ejecute su propio código PHP."
PLG_CONVERTFORMSAPPS_PHP_PHP="PHP"
PLG_CONVERTFORMSAPPS_PHP_PHP_DESC="Ingrese el código PHP para ejecutar. Puede consultar la base de datos, puede publicar datos en una URL o incluso obtener datos de una API. El cielo es el límite. <h4>VARIABLES ESPECIALES</h4>
Below are a few special variables you can use in your code.<br><br>- <em>$form</em> (Array) The form's settings<br>- <em>$submission</em> (Object) The final submission with the user's submitted values<br>- <em>$responses</em> (Array) The responses of the previously executed steps<h4>PASS DATA TO NEXT STEP</h4>Use <em>return $var;</em> statement to make <em>$var</em> available in the next step using the <em>{task.prev.response}</em> Smart Tag. You may return an Array or Object and access any property using the <em>{task.prev.response.PROPERTY}</em> syntax. Use the dot notation syntax to access unlimited depthed properties. <br><br>For example: If you return an array like this: <em>return [ 'name' => 'John', 'age'  => 23]</em>, puede acceder a la propiedad <em>age</em> en el siguiente paso usando la sintaxis <em>{task.prev.response.age}</em> . Si devuelve solo un número o una cadena, use  <em>{task.prev.response}</em> en su lugar.<br><br>No necesita incluir las etiquetas de apertura y cierre de PHP (<?php ?>)."
