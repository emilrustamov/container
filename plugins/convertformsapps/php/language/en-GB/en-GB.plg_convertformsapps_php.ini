PLG_CONVERTFORMSAPPS_PHP="Convert Forms - Apps - PHP"
PLG_CONVERTFORMSAPPS_PHP_DESC="Run PHP and share data between tasks"
PLG_CONVERTFORMSAPPS_PHP_ALIAS="PHP"
PLG_CONVERTFORMSAPPS_PHP_ACTION_PHP="Run PHP"
PLG_CONVERTFORMSAPPS_PHP_ACTION_PHP_DESC="Run your own PHP code."
PLG_CONVERTFORMSAPPS_PHP_PHP="PHP"
PLG_CONVERTFORMSAPPS_PHP_PHP_DESC="Enter the PHP code to run. You can query the database, you can post data to a URL or even fetch data from an API. The sky is the limit. <h4>SPECIAL VARIABLES</h4>Below are a few special variables you can use in your code.<br><br>- <em>$form</em> (Array) The form's settings<br>- <em>$submission</em> (Object) The final submission with the user's submitted values<br>- <em>$responses</em> (Array) The responses of the previously executed steps<h4>PASS DATA TO NEXT STEP</h4>Use <em>return $var;</em> statement to make <em>$var</em> available in the next step using the <em>{task.prev.response}</em> Smart Tag. You may return an Array or Object and access any property using the <em>{task.prev.response.PROPERTY}</em> syntax. Use the dot notation syntax to access unlimited depthed properties. <br><br>For example: If you return an array like this: <em>return [ 'name' => 'John', 'age'  => 23]</em>, you can access the <em>age</em> property in the next step by using <em>{task.prev.response.age}</em> syntax. If you return just a number or string, use <em>{task.prev.response}</em> instead.<br><br>You don't need to include the PHP opening and closing (&lt;?php ?>) tags."