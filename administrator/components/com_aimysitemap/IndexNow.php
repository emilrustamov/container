<?php
/*
 * Copyright (c) 2022-2024 Aimy Extensions, Netzum Sorglos Software GmbH
 *
 * https://www.aimy-extensions.com/
 *
 * License: GNU GPLv2, see LICENSE.txt within distribution and/or
 *          https://www.aimy-extensions.com/software-license.html
 */
 defined( '_JEXEC' ) or die(); require_once( JPATH_ADMINISTRATOR . '/components/com_aimysitemap/Sitemap.php' ); require_once( JPATH_ADMINISTRATOR . '/components/com_aimysitemap/helpers/kvstore.php' ); jimport( 'cms.plugin.helper' ); abstract class AimySitemapIndexNow { static private $key = false; static private $cfg = false; const KV_KEY = 'last-indexnow-ping'; const PLUGIN_NAME = 'aimyindexnow'; const REQUIRED_VERSION = '2.0'; public static function load() { $plugdir = JPATH_ROOT . '/plugins/content/' . self::PLUGIN_NAME . '/'; if ( ! is_dir( $plugdir ) ) { throw new \RuntimeException( \JText::sprintf( 'AIMY_SM_INDEXNOW_NOT_INSTALLED_X', 'https://www.aimy-extensions.com/joomla/indexnow.html' ) ); } if ( ! \JPluginHelper::isEnabled( 'content', self::PLUGIN_NAME ) ) { throw new \RuntimeException( \JText::_( 'AIMY_SM_INDEXNOW_DISABLED' ) ); } if ( ! file_exists( $plugdir . '/info.php' ) ) { throw new \RuntimeException( \JText::sprintf( 'AIMY_SM_INDEXNOW_NEEDS_UPDATE_XY', self::REQUIRED_VERSION, '1.0' ) ); } require_once( $plugdir . '/info.php' ); require_once( $plugdir . '/helpers.php' ); require_once( $plugdir . '/notifier.php' ); require_once( $plugdir . '/exclude-patterns.php' ); $v = Aimy\IndexNow\Info::getVersion(); if ( version_compare( $v, self::REQUIRED_VERSION, '<' ) ) { throw new \RuntimeException( \JText::sprintf( 'AIMY_SM_INDEXNOW_NEEDS_UPDATE_XY', self::REQUIRED_VERSION, $v ) ); } if ( ! Aimy\IndexNow\Info::isPro() ) { throw new \RuntimeException( \JText::sprintf( 'AIMY_SM_INDEXNOW_IS_NOT_PRO_X', Aimy\IndexNow\Info::getProductURL() ) ); } $p = JPluginHelper::getPlugin( 'content', self::PLUGIN_NAME ); if ( ! $p ) { throw new \RuntimeException( 'Failed to get plugin' ); } self::$cfg = new JRegistry(); self::$cfg->loadString( $p->params ); $key = self::$cfg->get( 'key', false ); JFactory::getLanguage()->load( 'plg_content_aimyindexnow', JPATH_ADMINISTRATOR ); Aimy\IndexNow\Helpers::checkKey( $key ); Aimy\IndexNow\Helpers::writeKeyfileIfNotExistent( $key ); self::$key = $key; } public static function submit_recent_changes() { if ( empty( self::$key ) ) { self::load(); } $since_ts = AimySitemapKVStore::get( self::KV_KEY ); $since_ts = ( $since_ts == '' ) ? 0 : $since_ts; $changes = self::get_recently_changed_urls( $since_ts ); $proto = AimySitemapSitemap::get_protocol(); $domain = AimySitemapSitemap::get_domain(); $expats = explode( "\n", self::$cfg->get( 'exclude-patterns' ) ); $urls = array(); foreach ( $changes as $path ) { $excluded = Aimy\IndexNow\ExcludePatterns::matches( $expats, urldecode( $path ) ); if ( ! $excluded ) { $urls[] = sprintf( '%s://%s%s', $proto, $domain, $path ); } } $time = time(); $count = 0; if ( count( $urls ) > 0 ) { $count = Aimy\IndexNow\Notifier::submitMultipleUrls( $urls, self::$key ); } AimySitemapKVStore::set( self::KV_KEY, $time ); return $count; } static private function get_recently_changed_urls( $since_ts ) { $db = JFactory::getDbo(); $q = $db->getQuery( true ); $q->select( $db->quoteName( 'url' ) ) ->from( $db->quoteName( '#__aimysitemap' ) ) ->where( $db->quoteName( 'mtime' ) . ' >= ' . $db->quote( $since_ts ) . ' AND ' . $db->quoteName( 'state' ) . ' = ' . $db->quote( '1' ) ); $db->setQuery( $q ); return $db->loadColumn(); } } 
