<?php
/*
 * Copyright (c) 2017-2024 Aimy Extensions, Netzum Sorglos Software GmbH
 * Copyright (c) 2014-2017 Aimy Extensions, Lingua-Systems Software GmbH
 *
 * https://www.aimy-extensions.com/
 *
 * License: GNU GPLv2, see LICENSE.txt within distribution and/or
 *          https://www.aimy-extensions.com/software-license.html
 */
 defined( '_JEXEC' ) or die(); require_once( JPATH_COMPONENT . '/helpers/config.php' ); require_once( JPATH_COMPONENT . '/helpers/rights.php' ); require_once( JPATH_COMPONENT . '/helpers/message.php' ); jimport( 'joomla.filesystem.file' ); class AimySitemapControllerRobotsTxt extends JControllerAdmin { public function save() { JSession::checkToken() or jexit( JText::_( 'INVALID TOKEN' ) ); $app = JFactory::getApplication(); self::write_file( $app->input->getString( 'robotstxt', '' ) ); $this->setRedirect( JRoute::_( 'index.php?option=com_aimysitemap&view=robotstxt', false ) ); } public function add_sitemap_field() { JSession::checkToken() or jexit( JText::_( 'INVALID TOKEN' ) ); $msg = new AimySitemapMessageHelper(); $app = JFactory::getApplication(); $txt = $app->input->getString( 'robotstxt', null ); if ( is_null( $txt ) ) { $msg->error( 'Internal error' ); } else { $cfg = new AimySitemapConfigHelper(); $path = trim( $cfg->get( 'xml_path', 'sitemap.xml' ), " \r\n/" ); if ( $cfg->get( 'xml_gz_enable', false ) ) { $path .= '.gz'; } if ( ! file_exists( JPATH_ROOT . '/' . $path ) ) { $msg->error( JText::_( 'AIMY_SM_WARN_XML_SITEMAP_MISSING' ) . ' &rarr; ' . sprintf( '<a href="%s">%s &amp; %s</a>', JRoute::_( 'index.php?option=com_aimysitemap&view=urls' ), JText::_( 'AIMY_SM_LINK_MANAGE' ), JText::_( 'AIMY_SM_WRITE_LBL' ) ) ); } else { $url = JUri::root() . $path; $field = 'Sitemap: ' . $url; if ( preg_match( '#^\Q' . $field . '\E\s*$#mi', $txt ) ) { $msg->notice( JText::_( 'AIMY_SM_ROBOTSTXT_SITEMAP_FIELD_ALREADY_PRESENT' ) ); } else { $msg->message( JText::_( 'AIMY_SM_ROBOTSTXT_SITEMAP_FIELD_ADDED' ) ); self::write_file( trim( $txt ) . "\n\n" . $field . "\n" ); } } } $this->setRedirect( JRoute::_( 'index.php?option=com_aimysitemap&view=robotstxt', false ) ); } public function validate() { JSession::checkToken() or jexit( JText::_( 'INVALID TOKEN' ) ); require_once( JPATH_COMPONENT . '/RobotsTxt.php' ); $msg = new AimySitemapMessageHelper(); $app = JFactory::getApplication(); $txt = $app->input->getString( 'robotstxt', null ); $ok = false; if ( is_null( $txt ) ) { $msg->error( 'Internal error' ); } else { try { $rob = new AimySitemapRobotsTxt( $txt ); $ok = true; } catch ( Exception $e ) { $msg->error( $e->getMessage() ); } } if ( $ok ) { $msg->message( JText::_( 'AIMY_SM_ROBOTSTXT_VALID' ) ); } $this->setRedirect( JRoute::_( 'index.php?option=com_aimysitemap&view=robotstxt', false ) ); } static private function write_file( $txt ) { $rights = AimySitemapRightsHelper::getRights(); if ( ! $rights->get( 'aimysitemap.write' ) ) { jexit( JText::_( 'JLIB_APPLICATION_ERROR_ACCESS_FORBIDDEN' ) ); } $msg = new AimySitemapMessageHelper(); $path = JPATH_ROOT . DIRECTORY_SEPARATOR . 'robots.txt'; if ( JFile::write( $path, $txt ) === false ) { $msg->error( JText::_( 'AIMY_SM_ROBOTSTXT_FAILED_TO_WRITE' ) ); } else { $msg->message( JText::_( 'AIMY_SM_ROBOTSTXT_WRITTEN' ) ); } } } 
